from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp  # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncio
import json
import random
import os
import logging

from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ACCUWEATHER_API_KEY = os.getenv("ACCUWEATHER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)
if not ACCUWEATHER_API_KEY:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω ACCUWEATHER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
last_weather = {}  # {user_id: {–≥–æ—Ä–æ–¥: {—á–∞—Å: {desc: str, timestamp: float}}}}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTIONS_FILE = "subscriptions.json"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è location key –≥–æ—Ä–æ–¥–æ–≤ (—á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
city_location_keys = {}  # {city_name: location_key}


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_subscriptions():
    try:
        with open(SUBSCRIPTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logger.info(f"–§–∞–π–ª {SUBSCRIPTIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
        return {}


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
def save_subscriptions(user_subs):
    try:
        with open(SUBSCRIPTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_subs, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_subscriptions = load_subscriptions()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
class WeatherForm(StatesGroup):
    waiting_for_city_now = State()
    waiting_for_city_forecast = State()
    waiting_for_city_day = State()
    waiting_for_subscribe_city = State()
    waiting_for_unsubscribe_city = State()


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
location_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
location_keyboard.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–í–≤–µ–¥–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:\n\n"
        "üå¶ /Pogoda_now ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "üìÖ /Pogoda_day ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n"
        "‚è≥ /pogoda_every_3h ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)\n"
        "üìå /subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "üîç /subs ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚ùå /unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞",
        reply_markup=location_keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è location key –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
async def get_location_key(city):
    if city in city_location_keys:
        return city_location_keys[city]

    try:
        url = f'http://dataservice.accuweather.com/locations/v1/cities/search?apikey={ACCUWEATHER_API_KEY}&q={city}&language=ru'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and len(data) > 0:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    location_key = data[0]['Key']
                    city_location_keys[city] = location_key
                    return location_key
                else:
                    logger.warning(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è location key –¥–ª—è {city}: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ location key: {e}")
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
async def fetch_current_weather(city):
    try:
        location_key = await get_location_key(city)
        if not location_key:
            return None

        url = f'http://dataservice.accuweather.com/currentconditions/v1/{location_key}?apikey={ACCUWEATHER_API_KEY}&language=ru&details=true'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and len(data) > 0:
                    return data[0]
                else:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –¥–ª—è {city}")
                    return None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {e}")
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 12 —á–∞—Å–æ–≤
async def fetch_hourly_forecast(city):
    try:
        location_key = await get_location_key(city)
        if not location_key:
            return None

        url = f'http://dataservice.accuweather.com/forecasts/v1/hourly/12hour/{location_key}?apikey={ACCUWEATHER_API_KEY}&language=ru&details=true&metric=true'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and len(data) > 0:
                    return data
                else:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Å–æ–≤–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è {city}")
                    return None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π
async def fetch_daily_forecast(city):
    try:
        location_key = await get_location_key(city)
        if not location_key:
            return None

        url = f'http://dataservice.accuweather.com/forecasts/v1/daily/5day/{location_key}?apikey={ACCUWEATHER_API_KEY}&language=ru&details=true&metric=true'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and 'DailyForecasts' in data:
                    return data
                else:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è {city}")
                    return None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {city}: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def get_location_by_coordinates(lat, lon):
    try:
        url = f'http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey={ACCUWEATHER_API_KEY}&q={lat},{lon}&language=ru'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and 'Key' in data:
                    location_key = data['Key']
                    city_name = data.get('LocalizedName', '–í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ')
                    return location_key, city_name
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}")
                    return None, None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏: {response.status}")
                return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return None, None


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async def fetch_weather_by_coordinates(lat, lon):
    try:
        location_key, city_name = await get_location_by_coordinates(lat, lon)
        if not location_key:
            return None

        url = f'http://dataservice.accuweather.com/currentconditions/v1/{location_key}?apikey={ACCUWEATHER_API_KEY}&language=ru&details=true'
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                if data and len(data) > 0:
                    current = data[0]
                    description = current.get('WeatherText', '')
                    temp = current.get('Temperature', {}).get('Metric', {}).get('Value', 0)
                    wind_speed = current.get('Wind', {}).get('Speed', {}).get('Metric', {}).get('Value', 0)

                    return (
                        f"üåç –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –∫–º/—á\n"
                        f"‚òÅ {description}\n"
                        f"{generate_weather_description(description, wind_speed, temp)}"
                    )
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}")
                    return None
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
def generate_weather_description(desc, wind_speed, temp):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤ —Å—Ç–∏–ª–µ –ù–∞–º–∏ –∏–∑ One Piece —Å –ø—Ä—è–º—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    desc (str): –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã (—è—Å–Ω–æ, –æ–±–ª–∞—á–Ω–æ, –¥–æ–∂–¥—å –∏ —Ç.–¥.)
    wind_speed (float): –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –º/—Å
    temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    str: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤ —Å—Ç–∏–ª–µ –ù–∞–º–∏ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    # –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    descriptions = {
        "—è—Å–Ω–æ": [
            "–û! –ù–µ–±–æ —á–∏—Å—Ç–æ–µ –∫–∞–∫ —Å–æ–∫—Ä–æ–≤–∏—â–µ! –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ë–µ–ª–ª—å-–º–µ—Ä–µ –±—ã–ª–∞ –±—ã –¥–æ–≤–æ–ª—å–Ω–∞ —Ç–∞–∫–∏–º –¥–Ω–µ–º, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?",
            "–§—É—É—É—Ö! –¢–∞–∫–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞! –≠–π, —Ç—ã! –•–≤–∞—Ç–∏—Ç —Å–∏–¥–µ—Ç—å –∏ –≥–ª–∞–∑–µ—Ç—å, –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä!",
            "–ú–æ–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç–∏–Ω–∫—Ç—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç. –ú–æ–∂–µ—Ç, –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ —Å —á–µ—Ä–Ω–∏–ª–∞–º–∏?"
        ],
        "–æ–±–ª–∞—á–Ω–æ": [
            "–•–º–º–º... —ç—Ç–∏ –æ–±–ª–∞–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –º–Ω–µ —Ç–∞–Ω–¥–∂–µ—Ä–∏–Ω–Ω—É—é —Ä–æ—â—É –Ω–∞ –ö–æ–∫–æ—è—Å–∏. –¢–µ–±–µ –ª—É—á—à–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–∞–≤–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π.",
            "–≠—Ç–∏ –æ–±–ª–∞–∫–∞... –æ–Ω–∏ –Ω–µ –æ–ø–∞—Å–Ω—ã, –Ω–æ –º–Ω–µ —ç—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è. –ë—É–¥—å –≥–æ—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —è —Å–∫–∞–∂—É!",
            "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ –∫—É—á–µ–≤—ã–µ –æ–±–ª–∞–∫–∞! –û–Ω–∏ –ø—Ä–µ–¥–≤–µ—â–∞—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤. –ó–∞–ø–∏—Å–∞–ª —ç—Ç–æ? –≠—Ç–æ –≤–∞–∂–Ω–æ!"
        ],
        "–¥–æ–∂–¥—å": [
            "–≠—Ç–∞ –±—É—Ä—è... –Ø —á—É–≤—Å—Ç–≤—É—é –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è! –ü—Ä–æ–≤–µ—Ä—å –≤—Å–µ –æ–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏ ‚Äî —è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å —Å–ø–∞—Å–∞—Ç—å —Ç–µ–±—è, –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–Ω–µ—à—å!",
            "–•–∞—Ö! –≠—Ç–æ—Ç –¥–æ–∂–¥—å –∫–∞–∫ —Å–ª–µ–∑—ã –º–æ—Ä—Å–∫–æ–≥–æ –∫–æ—Ä–æ–ª—è! –≠–π, —Ç—ã! –•–≤–∞—Ç–∏—Ç –ø—Ä—ã–≥–∞—Ç—å –≤ –ª—É–∂–∞—Ö, –ª—É—á—à–µ –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö –≤–µ—â–∞—Ö!",
            "–≠—Ç–∞ –≥—Ä–æ–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ —Ç–µ, —á—Ç–æ –±—ã–≤–∞–ª–∏ –Ω–∞–¥ –ê—Ä–ª–æ–Ω–≥ –ü–∞—Ä–∫–æ–º... –ù–µ –æ —á–µ–º –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è, –µ—Å–ª–∏ –±—É–¥–µ—à—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –º–æ–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º!"
        ],
        "–≥—Ä–æ–∑–∞": [
            "–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–õ–ê –¢–ï–ë–Ø! –≠—Ç–∞ –≥—Ä–æ–∑–∞ –Ω–µ —à—É—Ç–∫–∏! –ï—Å–ª–∏ –Ω–µ –±—É–¥–µ—à—å —Å–ª—É—à–∞—Ç—å—Å—è –º–æ–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –ø–æ–∂–∞–ª–µ–µ—à—å!",
            "–≠–¢–û –ù–ï –û–ë–´–ß–ù–ê–Ø –ì–†–û–ó–ê! –õ—É—á—à–µ —Å–ø—Ä—è—á—å—Å—è –¥–æ–º–∞! –ú—ã —Å–ø—Ä–∞–≤–∏–º—Å—è, –µ—Å–ª–∏ –±—É–¥–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –º–æ–µ–º—É –ø–ª–∞–Ω—É!",
            "–•–∞! –≠—Ç–∞ –≥—Ä–æ–∑–∞ –Ω–∏—á—Ç–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–µ–º, —á—Ç–æ —è –≤–∏–¥–µ–ª–∞ –≤ –ì—Ä–∞–Ω–¥ –õ–∞–π–Ω! –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ, –ù–ï –†–ê–°–°–õ–ê–ë–õ–Ø–ô–°–Ø! –ò –¥–µ–ª–∞–π –≤—Å—ë, —á—Ç–æ —è –≥–æ–≤–æ—Ä—é!"
        ],
        "—Å–Ω–µ–≥": [
            "–ë—Ä—Ä! –≠—Ç–æ—Ç —Å–Ω–µ–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ –î—Ä–∞–º! –¢–µ–±–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, —Ö–æ–ª–æ–¥–Ω–æ? –õ—É—á—à–µ –Ω–∞–¥–µ–Ω—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç–µ–ø–ª–æ–µ, –ø–æ–∫–∞ —è –Ω–µ –Ω–∞—á–∞–ª–∞ –∑–ª–∏—Ç—å—Å—è!",
            "–≠—Ç–æ—Ç —Å–Ω–µ–≥–æ–ø–∞–¥... –æ–Ω —Å–æ–∑–¥–∞—ë—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞—Å–∞–¥—ã. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –∫–æ–≥–¥–∞ –≤—ã—Ö–æ–¥–∏—à—å –Ω–∞ —É–ª–∏—Ü—É!",
            "–•–≤–∞—Ç–∏—Ç –ª—é–±–æ–≤–∞—Ç—å—Å—è —Å–Ω–µ–∂–∏–Ω–∫–∞–º–∏! –ù–∞–º –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–ø–ª–æ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–µ—Ç—Ä–∞! –¢—ã –º–µ–Ω—è —Å–ª—É—à–∞–µ—à—å –≤–æ–æ–±—â–µ?"
        ],
        "—Ç—É–º–∞–Ω": [
            "–≠—Ç–æ—Ç —Ç—É–º–∞–Ω... –æ–Ω –æ–ø–∞—Å–µ–Ω! –ë—É–¥—å –Ω–∞—á–µ–∫—É! –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å—Ç–æ –ø–æ–ø–∞—Å—Ç—å –≤ –±–µ–¥—É –∏–ª–∏ –∑–∞–±–ª—É–¥–∏—Ç—å—Å—è!",
            "–•–º–º... —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω. –û–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ –¢—Ä–∏–ª–ª–µ—Ä –ë–∞—Ä–∫–µ. –ù–µ –≤–∑–¥—É–º–∞–π –æ—Ç—Ö–æ–¥–∏—Ç—å –¥–∞–ª–µ–∫–æ - –∑–∞–±–ª—É–¥–∏—à—å—Å—è, –∫–∞–∫ –ó–æ—Ä–æ!",
            "–î–∞–∂–µ –º–æ—ë –∏—Å–∫—É—Å—Å—Ç–≤–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ—Å—Å–∏–ª—å–Ω–æ –≤ —Ç–∞–∫–æ–º —Ç—É–º–∞–Ω–µ! –õ—É—á—à–µ –æ—Å—Ç–∞–Ω—å—Å—è –¥–æ–º–∞, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–±–ª–µ–º!"
        ],
        "—à—Ç–æ—Ä–º": [
            "–≠–¢–û –ù–ê–°–¢–û–Ø–©–ò–ô –®–¢–û–†–ú –ì–†–ê–ù–î –õ–ê–ô–ù! –ó–ê–ô–ú–ò –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–û–ñ–ï–ù–ò–ï! –≠–ô, –ü–ï–†–ï–°–¢–ê–ù–¨ –°–ú–ï–Ø–¢–¨–°–Ø - –≠–¢–û –ù–ï –ò–ì–†–ê!",
            "–Ø –ß–£–í–°–¢–í–£–Æ –≠–¢–û–¢ –®–¢–û–†–ú! –û–ù –ö–ê–ö –î–ò–ö–ò–ô –ó–í–ï–†–¨! –õ–£–ß–®–ï –ü–û–î–ì–û–¢–û–í–¨–°–Ø –ö –•–£–î–®–ï–ú–£ –ò –°–õ–£–®–ê–ô –ú–û–ò –°–û–í–ï–¢–´!",
            "–í–û–õ–ù–´ –ö–ê–ö –ì–û–†–´! –í–ï–¢–ï–† –ö–ê–ö –ê–†–ú–ò–Ø –ú–û–†–°–ö–ò–• –ö–û–†–û–õ–ï–ô! –ù–û –ú–´ –°–ü–†–ê–í–ò–ú–°–Ø - –Ø –õ–£–ß–®–ò–ô –ù–ê–í–ò–ì–ê–¢–û–† –í –ú–ò–†–ï, –ü–†–û–°–¢–û –î–ï–õ–ê–ô –ß–¢–û –Ø –ì–û–í–û–†–Æ!"
        ]
    }

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –≤–µ—Ç—Ä–µ
    wind_comments = {
        "—Å–ª–∞–±—ã–π": [
            "–í–µ—Ç–µ—Ä –µ–¥–≤–∞ –∑–∞–º–µ—Ç–µ–Ω... —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–∏—Ç—å –±–æ–ª—å—à–µ —É—Å–∏–ª–∏–π –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥.",
            "–¢–∞–∫–æ–π —Å–ª–∞–±—ã–π –≤–µ—Ç–µ—Ä–æ–∫... –º–æ–∂–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è?",
            "–≠—Ç–æ—Ç –≤–µ—Ç–µ—Ä –Ω–µ —Å–¥–≤–∏–Ω–µ—Ç –¥–∞–∂–µ —Ç–≤–æ—é —à–ª—è–ø—É —Å –≥–æ–ª–æ–≤—ã!"
        ],
        "—Å—Ä–µ–¥–Ω–∏–π": [
            "–•–æ—Ä–æ—à–∏–π —É—Å—Ç–æ–π—á–∏–≤—ã–π –≤–µ—Ç–µ—Ä - —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ!",
            "–≠—Ç–æ—Ç –≤–µ—Ç–µ—Ä –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–∞—à–µ–≥–æ –∫—É—Ä—Å–∞! –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å —É–º–æ–º!",
            "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä! –° –Ω–∏–º —Ç—ã –¥–æ–±–µ—Ä—ë—à—å—Å—è –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤–¥–≤–æ–µ –±—ã—Å—Ç—Ä–µ–µ!"
        ],
        "—Å–∏–ª—å–Ω—ã–π": [
            "–≠—Ç–æ—Ç –≤–µ—Ç–µ—Ä –º–æ–∂–µ—Ç —Å–æ—Ä–≤–∞—Ç—å —à–ª—è–ø—É —Å —Ç–≤–æ–µ–π –≥–æ–ª–æ–≤—ã! –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ!",
            "–¢–ê–ö–û–ô –°–ò–õ–¨–ù–´–ô –í–ï–¢–ï–†! –î–ï–†–ñ–ò–°–¨ –ó–ê –ß–¢–û-–ù–ò–ë–£–î–¨!",
            "–•–∞! –≠—Ç–æ—Ç –≤–µ—Ç–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç —Ç–µ–±—è –∫ –º–µ—Å—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å!"
        ],
        "—à—Ç–æ—Ä–º–æ–≤–æ–π": [
            "–í–ï–¢–ï–† –ü–†–û–°–¢–û –ë–ï–ó–£–ú–ù–´–ô! –î–ê–ñ–ï –ú–û–ô –ö–õ–ò–ú–ê-–¢–ê–ö–¢ –ù–ï –ú–û–ñ–ï–¢ –ü–†–û–¢–ò–í–û–°–¢–û–Ø–¢–¨ –≠–¢–û–ú–£! –ê –£ –¢–ï–ë–Ø –ò –ü–û–î–ê–í–ù–û –ù–ï–¢ –®–ê–ù–°–û–í!",
            "–≠–¢–û –ù–ê–°–¢–û–Ø–©–ò–ô –¢–ê–ô–§–£–ù! –ù–ê–ú –ù–£–ñ–ù–û –£–ö–†–´–¢–ò–ï –ù–ï–ú–ï–î–õ–ï–ù–ù–û!",
            "–î–ï–†–ñ–ò–°–¨ –ö–†–ï–ü–ß–ï! –≠–¢–û–¢ –í–ï–¢–ï–† –•–û–ß–ï–¢ –£–ù–ï–°–¢–ò –¢–ï–ë–Ø –í –ù–ï–ò–ó–í–ï–°–¢–ù–û–ú –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò!"
        ]
    }

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
    temp_comments = {
        "—Ö–æ–ª–æ–¥–Ω–æ": [
            "–ë—Ä—Ä! –î–∞–∂–µ –º–æ–∏ —Ç–∞–Ω–¥–∂–µ—Ä–∏–Ω—ã –º—ë—Ä–∑–Ω—É—Ç! –ì–¥–µ —Ç–≤–æ–π —Å–≤–∏—Ç–µ—Ä? –ù–µ —Ö–æ—á—É –ø–æ—Ç–æ–º –ª–µ—á–∏—Ç—å —Ç–µ–±—è –æ—Ç –ø—Ä–æ—Å—Ç—É–¥—ã!",
            "–¢–∞–∫–æ–π —Ö–æ–ª–æ–¥... –ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–∞ —à–µ—Ä—Å—Ç—å –∫–∞–∫ —É –ß–æ–ø–ø–µ—Ä–∞, –±—ã–ª–æ –±—ã –ø—Ä–æ—â–µ!",
            "–•–æ–ª–æ–¥–Ω–æ –∫–∞–∫ –≤ –ê–ª–∞–±–∞—Å—Ç–µ –Ω–æ—á—å—é! –°–¥–µ–ª–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–≥—Ä–µ–≤–∞—é—â–µ–µ, –∏ –Ω–µ —Å–º–µ–π –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ —Ç–µ–±–µ –Ω–µ —Ö–æ–ª–æ–¥–Ω–æ!"
        ],
        "–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ": [
            "–ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ß—Ç–æ —Ç—ã —Å—Ç–æ–∏—à—å? –î–≤–∏–∂–µ–Ω–∏–µ —Å–æ–≥—Ä–µ–µ—Ç —Ç–µ–±—è!",
            "–ü—Ä–∏—è—Ç–Ω–∞—è –ø—Ä–æ—Ö–ª–∞–¥–∞. –ù–µ —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –º–Ω–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç?",
            "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ù–µ –≤—Ä–µ–º—è –¥–ª—è –ª–µ–Ω–∏, –∫–∞–∫ –¥—É–º–∞–µ—à—å?"
        ],
        "—Ç–µ–ø–ª–æ": [
            "–ü—Ä–∏—è—Ç–Ω–æ–µ —Ç–µ–ø–ª–æ, –∫–∞–∫ –≤ —Ç–∞–Ω–¥–∂–µ—Ä–∏–Ω–æ–≤–æ–π —Ä–æ—â–µ –ë–µ–ª–ª—å-–º–µ—Ä–µ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è, –ø–æ–∫–∞ –º–æ–∂–µ—à—å!",
            "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∑–∞–≥–∞—Ä–∞! –¢–æ–ª—å–∫–æ –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, –∏–ª–∏ –±—É–¥–µ—à—å –∫—Ä–∞—Å–Ω—ã–º –∫–∞–∫ —Ä–∞–∫!",
            "–¢–∞–∫–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ —Ç–µ–ø–ª–æ... –ñ–∞–ª—å, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–µ–ª–∞–º–∏ –≤–º–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞."
        ],
        "–∂–∞—Ä–∫–æ": [
            "–≠—Ç–∞ –∂–∞—Ä–∞ –Ω–µ–≤—ã–Ω–æ—Å–∏–º–∞! –¢–µ–±–µ –ª—É—á—à–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, –∏ –º–Ω–µ –ø—Ä–∏–Ω–µ—Å–∏ —Ç–æ–∂–µ!",
            "–ñ–∞—Ä–∫–æ –∫–∞–∫ –≤ –ø—É—Å—Ç—ã–Ω–µ –ê–ª–∞–±–∞—Å—Ç—ã! –ü–µ—Ä–µ—Å—Ç–∞–Ω—å –Ω–æ—Å–∏—Ç—å—Å—è - —Ç—ã –¥–µ–ª–∞–µ—à—å –µ—â—ë –∂–∞—Ä—á–µ!",
            "–í —Ç–∞–∫—É—é –∂–∞—Ä—É –¥–∞–∂–µ –º–æ–∏ —Ç–∞–Ω–¥–∂–µ—Ä–∏–Ω—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–ª–∏–≤–µ! –ú–æ–∂–µ—Ç, –ø–æ–º–æ–∂–µ—à—å –º–Ω–µ?"
        ],
        "–æ—á–µ–Ω—å –∂–∞—Ä–∫–æ": [
            "–°–ü–ê–°–ò–¢–ï! –≠–¢–ê –ñ–ê–†–ê –£–ë–ò–í–ê–ï–¢ –ú–ï–ù–Ø! –ü–û–ß–ï–ú–£ –Ø –ï–©–Å –ù–ï –ü–û–õ–£–ß–ò–õ–ê –õ–ï–ö–ê–†–°–¢–í–û –û–¢ –¢–ï–ü–õ–û–í–û–ì–û –£–î–ê–†–ê?! –ê –¢–´ –ü–û–ß–ï–ú–£ –ù–ï –°–¢–†–ê–î–ê–ï–®–¨?!",
            "–ù–ï–í–´–ù–û–°–ò–ú–û! –î–ê–ñ–ï –ú–û–ô –ö–õ–ò–ú–ê-–¢–ê–ö–¢ –ü–ï–†–ï–ì–†–ï–õ–°–Ø! –ù–£–ñ–ï–ù –ö–û–ù–î–ò–¶–ò–û–ù–ï–† –°–ï–ô–ß–ê–° –ñ–ï!",
            "–≠–¢–ê –ñ–ê–†–ê –•–£–ñ–ï –ß–ï–ú –ê–¢–ê–ö–ê –≠–ô–°–û–ú! –ú–ù–ï –ù–£–ñ–ï–ù –•–û–õ–û–î–ù–´–ô –ö–û–ö–¢–ï–ô–õ–¨ –°–ï–ô–ß–ê–° –ñ–ï! –ò –¢–ï–ë–ï –°–û–í–ï–¢–£–Æ –¢–û–ì–û –ñ–ï!"
        ]
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ç—Ä–∞
    if wind_speed < 2:
        wind_category = "—Å–ª–∞–±—ã–π"
    elif wind_speed < 8:
        wind_category = "—Å—Ä–µ–¥–Ω–∏–π"
    elif wind_speed < 15:
        wind_category = "—Å–∏–ª—å–Ω—ã–π"
    else:
        wind_category = "—à—Ç–æ—Ä–º–æ–≤–æ–π"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if temp < 0:
        temp_category = "—Ö–æ–ª–æ–¥–Ω–æ"
    elif temp < 15:
        temp_category = "–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ"
    elif temp < 25:
        temp_category = "—Ç–µ–ø–ª–æ"
    elif temp < 32:
        temp_category = "–∂–∞—Ä–∫–æ"
    else:
        temp_category = "–æ—á–µ–Ω—å –∂–∞—Ä–∫–æ"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    import random

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    if desc.lower() in descriptions:
        weather_desc = random.choice(descriptions[desc.lower()])
    else:
        weather_desc = random.choice([
            "–•–º–º... –°—Ç—Ä–∞–Ω–Ω–∞—è –ø–æ–≥–æ–¥–∞. –î–∞–∂–µ –º–æ–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å—Ç–∏–Ω–∫—Ç—ã —Å–±–∏—Ç—ã —Å —Ç–æ–ª–∫—É! –ê —Ç—ã —á—Ç–æ –¥—É–º–∞–µ—à—å?",
            "–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª–∞ –Ω–∏—á–µ–≥–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ –¥–∞–∂–µ –≤ –ì—Ä–∞–Ω–¥ –õ–∞–π–Ω! –¢—ã —Ö–æ—Ç—å –ø–æ–Ω–∏–º–∞–µ—à—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ?",
            "–≠—Ç–∞ –ø–æ–≥–æ–¥–∞... –æ–Ω–∞ –Ω–µ –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º! –ë—É–¥—å –Ω–∞—á–µ–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π!"
        ])

    wind_desc = random.choice(wind_comments[wind_category])
    temp_desc = random.choice(temp_comments[temp_category])

    # –û–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    greetings = [
        "–≠–π, —Ç—ã! ",
        "–°–ª—É—à–∞–π —Å—é–¥–∞! ",
        "–í–Ω–∏–º–∞–Ω–∏–µ! ",
        "–•–µ–π! ",
        "–°–º–æ—Ç—Ä–∏ –≤ –æ–±–∞! ",
        "",  # –ü—É—Å—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        "–¢—ã! –î–∞-–¥–∞, —Ç—ã! ",
        "–°–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ! "
    ]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    greeting = random.choice(greetings)
    full_description = f"{greeting}{weather_desc} {wind_desc} {temp_desc}"

    # –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    conclusions = [
        " –ò –Ω–µ –∑–∞–±—É–¥—å –∑–∞–ø–ª–∞—Ç–∏—Ç—å –º–Ω–µ –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥!",
        " –î–∞, –∏ –µ—â–µ: —Å —Ç–µ–±—è 1000 –±–µ–ª–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Ç–µ–æ–ø—Ä–æ–≥–Ω–æ–∑!",
        " –ë–µ—Ä–µ–≥–∏—Å—å –∏ –Ω–µ –∑–∞–±—É–¥—å –º–æ–π —Å–æ–≤–µ—Ç!",
        " –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–±–ª–µ–º!",
        " –ò –Ω–µ –≥–æ–≤–æ—Ä–∏ –ø–æ—Ç–æ–º, —á—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª–∞!",
        "",  # –ü—É—Å—Ç–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        " –Ø –∑–Ω–∞—é, –æ —á–µ–º –≥–æ–≤–æ—Ä—é - —è –ª—É—á—à–∏–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤ –º–∏—Ä–µ!",
        " –ê —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –∏ –∑–∞–π–º–∏—Å—å –¥–µ–ª–æ–º!"
    ]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%
    if random.random() < 0.7:
        full_description += random.choice(conclusions)

    return full_description


# –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
@dp.message_handler(commands=['Pogoda_now'])
async def get_weather_now(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_now.set()


@dp.message_handler(state=WeatherForm.waiting_for_city_now)
async def receive_weather_now(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_current_weather(city)

    if data:
        try:
            temp = data['Temperature']['Metric']['Value']
            desc = data['WeatherText']
            wind_speed = data['Wind']['Speed']['Metric']['Value']

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            observation_time = datetime.strptime(data['LocalObservationDateTime'], "%Y-%m-%dT%H:%M:%S%z")
            local_time = observation_time.strftime('%H:%M')

            is_day = data.get('IsDayTime', True)
            emoji = "üèôÔ∏è" if is_day else "üåÉ"

            weather_text = (
                f"{emoji} **{city.capitalize()}**\n"
                f"üïí *Local Time:* {local_time}\n"
                f"---------------------------------\n"
                f"üå° *Temperature:* {temp}¬∞C\n"
                f"üå´ *Condition:* {desc}\n"
                f"üí® *Wind:* {wind_speed} –∫–º/—á\n"
                f"{generate_weather_description(desc, wind_speed, temp)}"
            )

            await message.answer(weather_text, parse_mode=ParseMode.MARKDOWN)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()


# –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (–Ω–∞ 12 —á–∞—Å–æ–≤)
@dp.message_handler(commands=['pogoda_every_3h'])
async def get_weather_3h(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_forecast.set()


@dp.message_handler(state=WeatherForm.waiting_for_city_forecast)
async def receive_weather_3h(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_hourly_forecast(city)

    if data:
        try:
            forecast_text = (
                f"üåç **{city.capitalize()}** - 12-Hour Forecast\n"
                f"---------------------------------\n"
            )

            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∏–Ω–¥–µ–∫—Å—ã 0, 3, 6, 9)
            selected_forecasts = [data[i] for i in range(0, min(12, len(data)), 3)]

            for forecast in selected_forecasts:
                dt_local = datetime.strptime(forecast['DateTime'], "%Y-%m-%dT%H:%M:%S%z")
                temp = forecast['Temperature']['Value']
                desc = forecast['IconPhrase']
                wind_speed = forecast['Wind']['Speed']['Value']
                is_day = forecast.get('IsDaylight', True)
                emoji = "‚òÄÔ∏è" if is_day else "üåô"

                forecast_text += (
                    f"{emoji} **{dt_local.strftime('%d-%m %H:%M')}**\n"
                    f"üå° *Temp:* {temp}¬∞C | üå´ *Cond:* {desc} | üí® *Wind:* {wind_speed} –∫–º/—á\n"
                    f"---------------------------------\n"
                )

            await message.answer(forecast_text, parse_mode=ParseMode.MARKDOWN)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()


def get_moji():
    hour = datetime.now().hour
    emoji_map = {
        range(4, 7): "üåÜ",
        range(7, 17): "üèôÔ∏è",
        range(17, 19): "üåá",
        range(19, 22): "üåÜ",
        range(22, 24): "üåÉ",
        range(0, 4): "üåÉ",
    }
    for time_range, emoji in emoji_map.items():
        if hour in time_range:
            return emoji
    return "üåç"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
@dp.message_handler(commands=['Pogoda_day'])
async def get_weather_day(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_day.set()


@dp.message_handler(state=WeatherForm.waiting_for_city_day)
async def receive_weather_day(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_daily_forecast(city)

    if data:
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_forecast = data['DailyForecasts'][0]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
            date = datetime.strptime(today_forecast['Date'], "%Y-%m-%dT%H:%M:%S%z").strftime('%d.%m.%Y')

            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            min_temp = today_forecast['Temperature']['Minimum']['Value']
            max_temp = today_forecast['Temperature']['Maximum']['Value']
            avg_temp = (min_temp + max_temp) / 2

            # –û–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –∏ –Ω–æ—á–∏
            day_desc = today_forecast['Day']['IconPhrase']
            night_desc = today_forecast['Night']['IconPhrase']

            # –í–µ—Ç–µ—Ä (–±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
            day_wind = today_forecast['Day']['Wind']['Speed']['Value']
            night_wind = today_forecast['Night']['Wind']['Speed']['Value']
            max_wind = max(day_wind, night_wind)

            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤
            day_precip_prob = today_forecast['Day'].get('PrecipitationProbability', 0)
            night_precip_prob = today_forecast['Night'].get('PrecipitationProbability', 0)

            weather_text = (
                f"üåç **{city.capitalize()}** - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date}\n"
                f"---------------------------------\n"
                f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* –æ—Ç {min_temp}¬∞C –¥–æ {max_temp}¬∞C (–≤ —Å—Ä–µ–¥–Ω–µ–º {avg_temp:.1f}¬∞C)\n"
                f"‚òÄÔ∏è *–î–Ω–µ–º:* {day_desc} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day_precip_prob}%)\n"
                f"üåô *–ù–æ—á—å—é:* {night_desc} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {night_precip_prob}%)\n"
                f"üí® *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä:* {max_wind} –∫–º/—á\n"
                f"{generate_weather_description(day_desc, max_wind, max_temp)}"
            )

            await message.answer(weather_text, parse_mode=ParseMode.MARKDOWN)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()

@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    user_id = str(message.from_user.id)  # JSON –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç int –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
    if user_id not in user_subscriptions:
        user_subscriptions[user_id] = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_subscriptions(user_subscriptions)  # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    await WeatherForm.waiting_for_subscribe_city.set()


@dp.message_handler(state=WeatherForm.waiting_for_subscribe_city)
async def set_city(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    cities = [c.strip().lower() for c in message.text.split(",")]

    for city in cities:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ location key
        location_key = await get_location_key(city)
        if location_key:
            if city not in user_subscriptions[user_id]:
                user_subscriptions[user_id].append(city)
                await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ {city.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É!")
                save_subscriptions(user_subscriptions)
            else:
                await message.answer(f"‚ö†Ô∏è {city.capitalize()} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        else:
            await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ {city.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()


@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe_city(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in user_subscriptions or not user_subscriptions[user_id]:
        await message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.")
        return

    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(c.capitalize() for c in user_subscriptions[user_id])
    )
    await WeatherForm.waiting_for_unsubscribe_city.set()


@dp.message_handler(state=WeatherForm.waiting_for_unsubscribe_city)
async def process_unsubscribe(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    city = message.text.strip().lower()

    if city in user_subscriptions.get(user_id, []):
        user_subscriptions[user_id].remove(city)
        if not user_subscriptions[user_id]:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
            del user_subscriptions[user_id]
        save_subscriptions(user_subscriptions)
        await message.answer(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {city.capitalize()}.")
    else:
        await message.answer(f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {city.capitalize()}.")

    await state.finish()


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã –¥–ª—è AccuWeather
def categorize_weather(desc):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–∏–ø—ã –ø–æ–≥–æ–¥—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    """
    desc = desc.lower()

    if any(word in desc for word in ["–¥–æ–∂–¥—å", "–ª–∏–≤–µ–Ω—å", "–≥—Ä–æ–∑–∞"]):
        return "rain"
    elif any(word in desc for word in ["—Å–Ω–µ–≥", "–º–µ—Ç–µ–ª—å", "—Å–Ω–µ–≥–æ–ø–∞–¥"]):
        return "snow"
    elif any(word in desc for word in ["—Ç—É–º–∞–Ω", "–º–≥–ª–∞"]):
        return "fog"
    elif any(word in desc for word in ["–æ–±–ª–∞—á–Ω–æ", "–ø–∞—Å–º—É—Ä–Ω–æ"]):
        return "cloudy"
    elif any(word in desc for word in ["—è—Å–Ω–æ", "—Å–æ–ª–Ω–µ—á–Ω–æ", "—á–∏—Å—Ç–æ–µ –Ω–µ–±–æ"]):
        return "clear"
    else:
        return desc  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∏ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é


async def weather_monitor():
    while True:
        for user_id, cities in user_subscriptions.items():
            for city in cities:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã
                current_data = await fetch_current_weather(city)
                forecast_data = await fetch_hourly_forecast(city)

                if current_data and forecast_data:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if user_id not in last_weather:
                        last_weather[user_id] = {}
                    if city not in last_weather[user_id]:
                        last_weather[user_id][city] = {
                            "hourly_forecasts": {},  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ —á–∞—Å–∞–º
                            "weather_periods": [],  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π
                            "sent_notifications": {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        }

                    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                    now = datetime.now()

                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                    forecasts = []
                    for forecast in forecast_data:
                        dt_local = datetime.strptime(forecast['DateTime'], "%Y-%m-%dT%H:%M:%S%z")
                        dt_local = dt_local.replace(tzinfo=None)  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

                        desc = forecast['IconPhrase']
                        wind_speed = forecast['Wind']['Speed']['Value']
                        temp = forecast['Temperature']['Value']
                        category = categorize_weather(desc)

                        forecast_hour = dt_local.replace(minute=0, second=0, microsecond=0)
                        hour_key = forecast_hour.strftime('%Y%m%d%H')

                        forecast_data = {
                            "datetime": dt_local,
                            "hour_key": hour_key,
                            "desc": desc,
                            "category": category,
                            "wind_speed": wind_speed,
                            "temp": temp
                        }

                        forecasts.append(forecast_data)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º
                        last_weather[user_id][city]["hourly_forecasts"][hour_key] = forecast_data

                    # –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
                    if forecasts:
                        await analyze_weather_periods(user_id, city, forecasts, now)

        await asyncio.sleep(7200)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞


async def analyze_weather_periods(user_id, city, forecasts, now):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    forecasts.sort(key=lambda x: x["datetime"])

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –ø–æ–≥–æ–¥—ã
    periods = []
    current_period = None

    for forecast in forecasts:
        if current_period is None:
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
            current_period = {
                "category": forecast["category"],
                "start_time": forecast["datetime"],
                "end_time": forecast["datetime"],
                "description": forecast["desc"],
                "forecasts": [forecast]
            }
        elif forecast["category"] == current_period["category"]:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            current_period["end_time"] = forecast["datetime"]
            current_period["forecasts"].append(forecast)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            periods.append(current_period)
            current_period = {
                "category": forecast["category"],
                "start_time": forecast["datetime"],
                "end_time": forecast["datetime"],
                "description": forecast["desc"],
                "forecasts": [forecast]
            }

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
    if current_period:
        periods.append(current_period)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ–≥–æ–¥—ã
    last_weather[user_id][city]["weather_periods"] = periods

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    await check_weather_patterns(user_id, city, periods, now)


async def check_weather_patterns(user_id, city, periods, now):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    if len(periods) < 2:
        return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    alerts = []

    for i in range(len(periods) - 1):
        current_period = periods[i]
        next_period = periods[i + 1]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
        period_pair_key = f"{current_period['start_time'].strftime('%Y%m%d%H')}_to_{next_period['start_time'].strftime('%Y%m%d%H')}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
        if period_pair_key in last_weather[user_id][city]["sent_notifications"]:
            continue

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        hours_until_change = (next_period["start_time"] - now).total_seconds() / 3600

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 24 —á–∞—Å–æ–≤
        if 0 <= hours_until_change <= 24:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

            # 1. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            if (current_period["category"] in ["rain", "snow"] and
                    next_period["category"] not in ["rain", "snow"]):

                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
                if i + 2 < len(periods) and periods[i + 2]["category"] in ["rain", "snow"]:
                    break_duration = (periods[i + 2]["start_time"] - next_period["start_time"]).total_seconds() / 3600

                    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤ –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 6 —á–∞—Å–æ–≤)
                    if break_duration <= 6:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ –≤ –æ—Å–∞–¥–∫–∞—Ö
                        weather_type = "–¥–æ–∂–¥—å" if current_period["category"] == "rain" else "—Å–Ω–µ–≥"
                        start_break = next_period["start_time"].strftime("%d.%m –≤ %H:%M")
                        end_break = periods[i + 2]["start_time"].strftime("%d.%m –≤ %H:%M")

                        msg = (
                            f"‚è±Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ –≤ {city.capitalize()}:\n"
                            f"–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Ä—ã–≤ –≤ –æ—Å–∞–¥–∫–∞—Ö ({weather_type}) —Å {start_break} –¥–æ {end_break} "
                            f"({int(break_duration)} —á–∞—Å{'–∞' if 1 < break_duration < 5 else '–æ–≤'})\n"
                            f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å–∞–¥–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤—è—Ç—Å—è."
                        )
                        alerts.append(msg)

                        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
                        last_weather[user_id][city]["sent_notifications"][period_pair_key] = True
                        continue

            # 2. –ù–∞—á–∞–ª–æ –æ—Å–∞–¥–∫–æ–≤
            if (current_period["category"] not in ["rain", "snow"] and
                    next_period["category"] in ["rain", "snow"]):

                rain_start = next_period["start_time"].strftime("%d.%m –≤ %H:%M")
                weather_type = "–¥–æ–∂–¥—å" if next_period["category"] == "rain" else "—Å–Ω–µ–≥"

                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤
                rain_duration = (next_period["end_time"] - next_period["start_time"]).total_seconds() / 3600

                duration_text = ""
                if 3 > rain_duration > 1:
                    duration_text = f"(–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –æ–∫–æ–ª–æ {int(rain_duration)} —á–∞—Å{'–∞' if 1 < rain_duration < 5 else '–æ–≤'})"
                elif 1 >= rain_duration > 0:
                    duration_text = f"(–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –æ–∫–æ–ª–æ {int(rain_duration * 60)} –º–∏–Ω—É—Ç)"
                elif rain_duration >= 3:
                    duration_text = f"(–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π, –æ–∫–æ–ª–æ {int(rain_duration)} —á–∞—Å{'–æ–≤' if rain_duration >= 5 else '–∞'})"

                msg = (
                    f"üåßÔ∏è –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∞–ª–∞ –æ—Å–∞–¥–∫–æ–≤ –≤ {city.capitalize()}:\n"
                    f"–û–∂–∏–¥–∞–µ—Ç—Å—è {weather_type} —Å {rain_start} {duration_text}"
                )
                alerts.append(msg)

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
                last_weather[user_id][city]["sent_notifications"][period_pair_key] = True

            # 3. –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
            curr_avg_temp = sum(f["temp"] for f in current_period["forecasts"]) / len(current_period["forecasts"])
            next_avg_temp = sum(f["temp"] for f in next_period["forecasts"]) / len(next_period["forecasts"])

            temp_diff = next_avg_temp - curr_avg_temp

            if abs(temp_diff) > 6:
                change_time = next_period["start_time"].strftime("%d.%m –≤ %H:%M")
                direction = "–ø–æ—Ç–µ–ø–ª–µ–Ω–∏—è" if temp_diff > 0 else "–ø–æ—Ö–æ–ª–æ–¥–∞–Ω–∏—è"

                msg = (
                    f"üå°Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ {city.capitalize()}:\n"
                    f"–û–∂–∏–¥–∞–µ—Ç—Å—è {direction} –Ω–∞ {abs(temp_diff):.1f}¬∞C —Å {change_time}"
                )
                alerts.append(msg)

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã –ø–µ—Ä–∏–æ–¥–æ–≤
                last_weather[user_id][city]["sent_notifications"][period_pair_key] = True

            # 4. –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
            avg_wind_speed_current = sum(f["wind_speed"] for f in current_period["forecasts"]) / len(
                current_period["forecasts"])
            avg_wind_speed_next = sum(f["wind_speed"] for f in next_period["forecasts"]) / len(next_period["forecasts"])

            # –ï—Å–ª–∏ –≤–µ—Ç–µ—Ä —É—Å–∏–ª–∏—Ç—Å—è –¥–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if avg_wind_speed_next > 15 and avg_wind_speed_next > avg_wind_speed_current * 1.5:
                change_time = next_period["start_time"].strftime("%d.%m –≤ %H:%M")

                msg = (
                    f"üí® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–µ—Ç—Ä–µ –≤ {city.capitalize()}:\n"
                    f"–° {change_time} –æ–∂–∏–¥–∞–µ—Ç—Å—è —É—Å–∏–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –¥–æ {avg_wind_speed_next:.1f} –∫–º/—á\n"
                    f"–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ!"
                )
                alerts.append(msg)

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                last_weather[user_id][city]["sent_notifications"][period_pair_key] = True

            # 5. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç—É–º–∞–Ω–µ
            if next_period["category"] == "fog" and current_period["category"] != "fog":
                fog_time = next_period["start_time"].strftime("%d.%m –≤ %H:%M")

                msg = (
                    f"üå´Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç—É–º–∞–Ω–µ –≤ {city.capitalize()}:\n"
                    f"–° {fog_time} –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç—É–º–∞–Ω. –í–∏–¥–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\n"
                    f"–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!"
                )
                alerts.append(msg)

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                last_weather[user_id][city]["sent_notifications"][period_pair_key] = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if alerts:
        try:
            await bot.send_message(int(user_id), "\n\n".join(alerts))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_daily_forecast():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É—Ç—Ä–æ–º (8:00)
    """
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 8 —É—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        target_time = now.replace(hour=8, minute=0, second=0, microsecond=0)
        if now.hour >= 8:
            target_time += timedelta(days=1)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å
        seconds_to_wait = (target_time - now).total_seconds()

        # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.sleep(seconds_to_wait)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        for user_id, cities in user_subscriptions.items():
            for city in cities:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
                    data = await fetch_daily_forecast(city)

                    if data:
                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        today_forecast = data['DailyForecasts'][0]

                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
                        date = datetime.strptime(today_forecast['Date'], "%Y-%m-%dT%H:%M:%S%z").strftime('%d.%m.%Y')

                        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                        min_temp = today_forecast['Temperature']['Minimum']['Value']
                        max_temp = today_forecast['Temperature']['Maximum']['Value']

                        # –û–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –∏ –Ω–æ—á–∏
                        day_desc = today_forecast['Day']['IconPhrase']
                        night_desc = today_forecast['Night']['IconPhrase']

                        # –í–µ—Ç–µ—Ä
                        day_wind = today_forecast['Day']['Wind']['Speed']['Value']
                        night_wind = today_forecast['Night']['Wind']['Speed']['Value']

                        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤
                        day_precip_prob = today_forecast['Day'].get('PrecipitationProbability', 0)
                        night_precip_prob = today_forecast['Night'].get('PrecipitationProbability', 0)

                        weather_text = (
                            f"‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, {date}\n"
                            f"üåç **{city.capitalize()}**\n"
                            f"---------------------------------\n"
                            f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* –æ—Ç {min_temp}¬∞C –¥–æ {max_temp}¬∞C\n"
                            f"‚òÄÔ∏è *–î–Ω–µ–º:* {day_desc} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day_precip_prob}%)\n"
                            f"üåô *–ù–æ—á—å—é:* {night_desc} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {night_precip_prob}%)\n"
                            f"üí® *–í–µ—Ç–µ—Ä:* –¥–Ω–µ–º - {day_wind} –∫–º/—á, –Ω–æ—á—å—é - {night_wind} –∫–º/—á\n"
                            f"{generate_weather_description(day_desc, day_wind, max_temp)}"
                        )

                        await bot.send_message(int(user_id), weather_text, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–Ω—è–ª–∞ –≤—Ä–µ–º—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
        await asyncio.sleep(60)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    help_text = (
        "üå¶ **–ü–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /Pogoda_now - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "‚Ä¢ /Pogoda_day - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å\n"
        "‚Ä¢ /pogoda_every_3h - –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤\n"
        "‚Ä¢ /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã\n"
        "‚Ä¢ /subs - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ /unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–≥–æ–¥—ã\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üì± –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞."
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler()
async def process_text_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    city = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
    location_key = await get_location_key(city)

    if location_key:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        data = await fetch_current_weather(city)

        if data:
            try:
                temp = data['Temperature']['Metric']['Value']
                desc = data['WeatherText']
                wind_speed = data['Wind']['Speed']['Metric']['Value']

                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                observation_time = datetime.strptime(data['LocalObservationDateTime'], "%Y-%m-%dT%H:%M:%S%z")
                local_time = observation_time.strftime('%H:%M')

                is_day = data.get('IsDayTime', True)
                emoji = "üèôÔ∏è" if is_day else "üåÉ"

                weather_text = (
                    f"{emoji} **{city.capitalize()}**\n"
                    f"üïí *Local Time:* {local_time}\n"
                    f"---------------------------------\n"
                    f"üå° *Temperature:* {temp}¬∞C\n"
                    f"üå´ *Condition:* {desc}\n"
                    f"üí® *Wind:* {wind_speed} –∫–º/—á\n"
                    f"{generate_weather_description(desc, wind_speed, temp)}"
                )

                await message.answer(weather_text, parse_mode=ParseMode.MARKDOWN)
            except KeyError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {e}")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.")
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/Pogoda_now - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
            "/Pogoda_day - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n"
            "/pogoda_every_3h - –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º"
        )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(dp):
    global session
    session = aiohttp.ClientSession()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(weather_monitor())
    asyncio.create_task(send_daily_forecast())

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")


async def on_shutdown(dp):
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
    if session:
        await session.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)