from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import asyncio
import json
import random
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "7519852063:AAHT4lEHc1xc2JZFeCCiD3n5Sm1ZcH3cR8w"
OWM_TOKEN = "8718b212f5b86944c0236f98618c961c"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
last_weather = {}  # {user_id: {–≥–æ—Ä–æ–¥: {—á–∞—Å: –æ–ø–∏—Å–∞–Ω–∏–µ}}}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTIONS_FILE = "subscriptions.json"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_subscriptions():
    try:
        with open(SUBSCRIPTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
def save_subscriptions():
    try:
        with open(SUBSCRIPTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(user_subscriptions, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_subscriptions = load_subscriptions()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
class WeatherForm(StatesGroup):
    waiting_for_city_now = State()
    waiting_for_city_forecast = State()
    waiting_for_city_day = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–í–≤–µ–¥–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:\n\n"
        "üå¶ /Pogoda_now ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "üìÖ /Pogoda_day ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n"
        "‚è≥ /pogoda_every_3h ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)",
        reply_markup = location_keyboard
    )

async def fetch_weather(city, endpoint="weather"):
    url = f'https://api.openweathermap.org/data/2.5/{endpoint}?q={city}&appid={OWM_TOKEN}&units=metric&lang=ru'
    response = requests.get(url)
    return response.json() if response.status_code == 200 else None

# –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
@dp.message_handler(commands=['Pogoda_now'])
async def get_weather_now(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_now.set()

@dp.message_handler(state=WeatherForm.waiting_for_city_now)
async def receive_weather_now(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_weather(city)

    if data:
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"].capitalize()
        wind_speed = data["wind"]["speed"]
        dt_local = datetime.utcfromtimestamp(data["dt"]) + timedelta(seconds=data["timezone"])
        timezone_offset = data["timezone"]
        weather_text = (
            f"{get_emoji(timezone_offset)} **{city.capitalize()}**\n"
            f"üïí *Local Time:* {dt_local.strftime('%H:%M')}\n"
            f"---------------------------------\n"
            f"üå° *Temperature:* {temp}¬∞C\n"
            f"üå´ *Condition:* {desc}\n"
            f"üí® *Wind:* {wind_speed} m/s\n"
            f"{generate_weather_description(desc, wind_speed, temp)}"
        )

        await message.answer(weather_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()

# –ü—Ä–æ–≥–Ω–æ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ (–Ω–∞ 24 —á–∞—Å–∞)
@dp.message_handler(commands=['pogoda_every_3h'])
async def get_weather_3h(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_forecast.set()

@dp.message_handler(state=WeatherForm.waiting_for_city_forecast)
async def receive_weather_3h(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_weather(city, "forecast")
    list_temp = []
    if data:
        timezone_offset = data["city"]["timezone"]
        forecast_text = (
            f"{get_emoji(timezone_offset)} **{city.capitalize()}** - 24-Hour Forecast\n"
            f"(UTC {timezone_offset // 3600:+d})\n"
            f"---------------------------------\n"
        )

        for forecast in data["list"][:8]:
            dt_local = datetime.strptime(forecast["dt_txt"], "%Y-%m-%d %H:%M:%S") + timedelta(seconds=timezone_offset)
            temp = forecast["main"]["temp"]
            desc = forecast["weather"][0]["description"].capitalize()
            wind_speed = forecast["wind"]["speed"]
            list_temp.append(temp)
            forecast_text += (
                f"üìÖ **{dt_local.strftime('%d-%m %H:%M')}**\n"
                f"üå° *Temp:* {temp}¬∞C | üå´ *Cond:* {desc} | üí® *Wind:* {wind_speed} m/s\n"
                f"---------------------------------\n"
            )

        await message.answer(forecast_text, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()

def get_moji():
    hour = datetime.now().hour
    emoji_map = {
        range(4, 7): "üåÜ",
        range(7, 17): "üèôÔ∏è",
        range(17, 19): "üåá",
        range(19, 22): "üåÜ",
        range(22, 24): "üåÉ",
        range(0, 4): "üåÉ",
    }
    for time_range, emoji in emoji_map.items():
        if hour in time_range:
            return emoji
def get_emoji(timezone_offset):
    user_time = datetime.utcnow() + timedelta(seconds=timezone_offset)
    hour = user_time.hour

    emoji_map = {
        range(4, 7): "üåÜ",   # –†–∞—Å—Å–≤–µ—Ç
        range(7, 17): "üèôÔ∏è",  # –î–µ–Ω—å
        range(17, 19): "üåá",  # –ó–∞–∫–∞—Ç
        range(19, 22): "üåÜ",  # –í–µ—á–µ—Ä
        range(22, 24): "üåÉ",  # –ù–æ—á—å
        range(0, 4): "üåÉ",    # –ü–æ–∑–¥–Ω—è—è –Ω–æ—á—å
    }
    for time_range, emoji in emoji_map.items():
        if hour in time_range:
            return emoji
    return "‚ùì"  # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
# –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
@dp.message_handler(commands=['Pogoda_day'])
async def get_weather_day(message: Message):
    await message.answer(f"{get_moji()} –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await WeatherForm.waiting_for_city_day.set()

@dp.message_handler(state=WeatherForm.waiting_for_city_day)
async def receive_weather_day(message: Message, state: FSMContext):
    city = message.text.strip().lower()
    data = await fetch_weather(city, "forecast")

    if data:
        timezone_offset = data["city"]["timezone"]
        today_str = (datetime.utcnow() + timedelta(seconds=timezone_offset)).strftime('%Y-%m-%d')

        list_temp = []
        daily_temps = []
        wind_speeds = []
        descriptions = {}
        for forecast in data["list"]:
            dt_local = datetime.strptime(forecast["dt_txt"], "%Y-%m-%d %H:%M:%S") + timedelta(seconds=timezone_offset)
            if dt_local.strftime('%Y-%m-%d') == today_str:
                temp = forecast["main"]["temp"]
                desc = forecast["weather"][0]["description"].capitalize()
                daily_temps.append(temp)
                descriptions[desc] = descriptions.get(desc, 0) + 1
                wind_speeds.append(forecast["wind"]["speed"])
                list_temp.append(temp)

        if daily_temps:
            max_temp = max(list_temp)
            avg_temp = round(sum(daily_temps) / len(daily_temps), 1)
            main_desc = max(descriptions, key=descriptions.get)
            max_wind_speed = max(wind_speeds)
            timezone_offset = data["city"]["timezone"]
            weather_text = (
                f"{get_emoji(timezone_offset)} **{city.capitalize()}** - Today's Forecast\n"
                f"---------------------------------\n"
                f"üå° *Max Temp:*{max_temp}¬∞C / *Avg Temp:* {avg_temp}¬∞C\n"
                f"üå´ *Weather:* {main_desc}\n"
                f"üí® *Max Wind:* {max_wind_speed} m/s\n"
                f"{generate_weather_description(main_desc, max_wind_speed, max_temp)}"
            )
            await message.answer(weather_text, parse_mode=ParseMode.MARKDOWN)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.finish()

async def fetch_forecast(city):
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_TOKEN}&units=metric&lang=ru'
    response = requests.get(url)
    return response.json() if response.status_code == 200 else None

waiting_for_city = set()  # –•—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–æ–¥—è—Ç –≥–æ—Ä–æ–¥

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    user_id = str(message.from_user.id)  # JSON –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç int –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π
    if user_id not in user_subscriptions:
        user_subscriptions[user_id] = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_subscriptions()  # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª

    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    waiting_for_city.add(user_id)

@dp.message_handler(lambda message: str(message.from_user.id) in waiting_for_city)
async def set_city(message: types.Message):
    user_id = str(message.from_user.id)
    cities = [c.strip().lower() for c in message.text.split(",")]

    for city in cities:
        data = await fetch_forecast(city)
        if data:
            if city not in user_subscriptions[user_id]:
                user_subscriptions[user_id].append(city)
                await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ {city.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫—É!")
                save_subscriptions()  # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
            else:
                await message.answer(f"‚ö†Ô∏è {city.capitalize()} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
        else:
            await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ {city.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    waiting_for_city.discard(user_id)
# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≥–æ–¥—ã

waiting_for_unsub = set()

@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe_city(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in user_subscriptions or not user_subscriptions[user_id]:
        await message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.")
        return

    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(c.capitalize() for c in user_subscriptions[user_id])
    )
    waiting_for_unsub.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞


@dp.message_handler(lambda message: str(message.from_user.id) in waiting_for_unsub)
async def process_unsubscribe(message: Message):
    user_id = str(message.from_user.id)
    city = message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è‰∏ÄËá¥–Ω–æ—Å—Ç–∏

    if city in user_subscriptions.get(user_id, []):
        user_subscriptions[user_id].remove(city)
        if not user_subscriptions[user_id]:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
            del user_subscriptions[user_id]
        save_subscriptions()  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await message.answer(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {city.capitalize()}.")
    else:
        await message.answer(f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {city.capitalize()}.")

    waiting_for_unsub.discard(user_id)  # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è


def generate_weather_description(desc, wind_speed, temp):
    # –§—Ä–∞–∑—ã –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if temp < -10:
        temp_phrases = [
            "‚ùÑÔ∏è –ë–æ–∂–µ, –∫–∞–∫ –º–æ—Ä–æ–∑–Ω–æ, —Å–ª–æ–≤–Ω–æ –≤–µ—Å—å –º–∏—Ä –ø–æ–∫—Ä—ã—Ç –ª—å–¥–æ–º!",
            "ü•∂ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ -10 ‚Äî –¥–µ—Ä–∂–∏—Ç–µ —à—É–±—ã –∫—Ä–µ–ø—á–µ, –∫–∞–∫ –Ω–∞ —à—Ç–æ—Ä–º–æ–≤–æ–º –º–æ—Ä–µ!",
            "üß£ –•–æ–ª–æ–¥ –ø—Ä–æ–±–∏—Ä–∞–µ—Ç –¥–æ –∫–æ—Å—Ç–µ–π, –∫–∞–∫ –ª–µ–¥—è–Ω–æ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ —Å–µ–≤–µ—Ä–Ω—ã—Ö –≤–µ—Ç—Ä–æ–≤!",
            "‚ùÑÔ∏è –ó–∞–º–µ—Ä–∑–Ω—É—Ç—å –º–æ–∂–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–∞–∫, –±—É–¥—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É!",
            "ü•∂ –¢–∞–∫–∞—è —Å—Ç—É–∂–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –¥–∞–∂–µ —Å–∞–º—ã–µ —Å–º–µ–ª—ã–µ —Å–µ—Ä–¥—Ü–∞!",
            "üß§ –•–æ–ª–æ–¥–∞, –∫–∞–∫ —É —Å–∞–º—ã—Ö —Å—É—Ä–æ–≤—ã—Ö –º–æ—Ä—Å–∫–∏—Ö –±–µ—Ä–µ–≥–æ–≤, –Ω–µ –ø—Ä–æ—â–∞—é—Ç —Å–ª–∞–±–æ—Å—Ç–∏!",
            "‚ùÑÔ∏è –≠—Ç–æ —Ö–æ–ª–æ–¥, –∫–∞–∫ —É –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–µ–≤–µ—Ä–Ω—ã—Ö –ª—å–¥–æ–≤ ‚Äî –±–µ—Ä–µ–≥–∏—Ç–µ—Å—å!",
            "ü•∂ –ú–æ—Ä–æ–∑ –±—å—ë—Ç —Ç–æ—á–Ω–æ, –∫–∞–∫ –ø—Ä–∏—Ü–µ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª ‚Äî –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–æ!",
            "üß£ –ö–∞–∂–¥—ã–π —à–∞–≥ —Å–ª–æ–≤–Ω–æ –≤ –ª–µ–¥—è–Ω–æ–π –ª–æ–≤—É—à–∫–µ ‚Äî —à–∞–ø–∫–∞, —à–∞—Ä—Ñ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –æ–±—è–∑–∞–Ω—ã –±—ã—Ç—å —Å –≤–∞–º–∏!"
        ]
    elif temp < 0:
        temp_phrases = [
            "ü•∂ –õ–µ–≥–∫–∏–π –º–æ—Ä–æ–∑, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∏–º–µ.",
            "‚ùÑÔ∏è –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –∫–∞–∫ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ ‚Äî –æ–¥–µ–Ω—å—Ç–µ—Å—å –ø–æ–ª—É—á—à–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ—Ä–∑–Ω—É—Ç—å.",
            "üß§ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —á—É—Ç—å –Ω–∏–∂–µ –Ω—É–ª—è ‚Äî –ø–∞–ª—å—Ç–æ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏ —Å–ø–∞—Å—É—Ç –≤–∞—Å.",
            "‚ùÑÔ∏è –ù–µ–º–Ω–æ–≥–æ –º–æ—Ä–æ–∑–Ω–æ, –Ω–æ —ç—Ç–æ –ª–∏—à—å –ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –∑–∏–º—ã.",
            "ü•∂ –õ–µ–≥–∫–∏–π —Ö–æ–ª–æ–¥–æ–∫, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —É—é—Ç–Ω–æ–≥–æ —á–∞—è —É –∫–∞–º–∏–Ω–∞.",
            "‚ùÑÔ∏è –ú–æ—Ä–æ–∑–æ–∫, –∫–∞–∫ –ª–µ–≥–∫–æ–µ –¥—É–Ω–æ–≤–µ–Ω–∏–µ –∑–∏–º—ã, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Å–≤–∏—Ç–µ—Ä.",
            "üß§ –ü—Ä–æ—Ö–ª–∞–¥–∞ –∑–∏–º–Ω–∏—Ö —É—Ç—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–ø–ª–∞.",
            "ü•∂ –ß—É—Ç—å –Ω–∏–∂–µ –Ω—É–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–æ—Å–∏—Ç–µ –≤—Å—ë, —á—Ç–æ —Å–æ–≥—Ä–µ–≤–∞–µ—Ç.",
            "‚ùÑÔ∏è –ù–µ–±–æ–ª—å—à–æ–π –º–æ—Ä–æ–∑–æ–∫, –Ω–æ –æ–Ω –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è."
        ]
    elif temp < 10:
        temp_phrases = [
            "üå¨Ô∏è –°–≤–µ–∂–æ, –∫–∞–∫ –º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑, –Ω–æ –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç.",
            "üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –∫–∞–∫ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ —É –±–µ—Ä–µ–≥–∞ ‚Äî –æ–¥–µ–Ω—å—Ç–µ—Å—å –ø–æ –ø–æ–≥–æ–¥–µ.",
            "üçÇ –û—Å–≤–µ–∂–∞—é—â–µ, —Å–ª–æ–≤–Ω–æ –ø–µ—Ä–≤—ã–µ –≤–æ–ª–Ω—ã —É—Ç—Ä–∞ ‚Äî –∫—É—Ä—Ç–∫–∞ –≤ –ø–ª—é—Å.",
            "üå¨Ô∏è –õ–µ–≥–∫–∏–π —Ö–æ–ª–æ–¥–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.",
            "üß• –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è —Å—Ç–∏–ª—å–Ω–æ–π –∫—É—Ä—Ç–∫–∏.",
            "üçÇ –°–≤–µ–∂–µ—Å—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Ä—Ç–∞, –≥–¥–µ –ø—Ä–æ—Ö–ª–∞–¥–∞ –º–∞–Ω–∏—Ç –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º.",
            "üå¨Ô∏è –ü—Ä–æ—Ö–ª–∞–¥–∞, –∫–∞–∫ –ª–µ–≥–∫–∏–π –º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑, –¥–æ–±–∞–≤–ª—è–µ—Ç –±–æ–¥—Ä–æ—Å—Ç–∏.",
            "üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –Ω–æ —ç—Ç–æ –ª–∏—à—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—É–ª–∫–µ.",
            "üçÇ –°–≤–µ–∂–µ—Å—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ—Ä—è ‚Äî –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ª—ë–≥–∫–∏–π –ø–ª–∞—â."
        ]
    elif temp < 20:
        temp_phrases = [
            "üå§Ô∏è –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ, –∫–∞–∫ –Ω–∞ –ø–∞–ª—É–±–µ –≤ —è—Å–Ω—ã–π –¥–µ–Ω—å ‚Äî –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!",
            "üôÇ –ü–æ–≥–æ–¥–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è, –∫–∞–∫ –º–æ—Ä—Å–∫–∞—è –≥–ª–∞–¥—å ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Å–º–µ–ª—ã—Ö —à–∞–≥–æ–≤!",
            "üåø –¢–µ–ø–ª–æ, –Ω–æ –Ω–µ –∂–∞—Ä–∫–æ ‚Äî –ø—Ä—è–º–æ –∫–∞–∫ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å –Ω–∞ –±–æ—Ä—Ç—É.",
            "üå§Ô∏è –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, —á—Ç–æ–±—ã —É—Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–º!",
            "üôÇ –ü–æ–≥–æ–¥–∞, —Å–ª–æ–≤–Ω–æ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –º–æ—Ä—è ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç–æ–π!",
            "üåø –¢–µ–ø–ª–æ, –∫–∞–∫ –ª–∞—Å–∫–æ–≤–æ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ —Å–æ–ª–Ω—Ü–∞ ‚Äî –≤—Ä–µ–º—è –¥–ª—è —Å–≤–µ—Ä—à–µ–Ω–∏–π!",
            "üå§Ô∏è –õ–µ–≥–∫–∞—è –ø—Ä–æ—Ö–ª–∞–¥–∞ –ø—Ä–∏–¥–∞–µ—Ç —Å–∏–ª –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!",
            "üôÇ –ü–æ–≥–æ–¥–∞ –±–∞–ª—É–µ—Ç, —Å–ª–æ–≤–Ω–æ –∑–æ–ª–æ—Ç–æ–π –±—Ä–∏–∑ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
            "üåø –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è –ø–æ –≤–æ–ª–Ω–∞–º —Å—É–¥—å–±—ã!"
        ]
    else:
        temp_phrases = [
            "‚òÄÔ∏è –ñ–∞—Ä–∫–æ, –∫–∞–∫ –≤ —Å–µ—Ä–¥—Ü–µ —Ç—Ä–æ–ø–∏–∫–æ–≤ ‚Äî –±–µ—Ä–µ–≥–∏—Ç–µ—Å—å –ø–µ—Ä–µ–≥—Ä–µ–≤–∞!",
            "üî• –°–æ–ª–Ω—Ü–µ –ø–∞–ª–∏—Ç, —Å–ª–æ–≤–Ω–æ –æ–≥–Ω–µ–Ω–Ω–æ–µ –∫–æ–ø—å–µ ‚Äî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É!",
            "üòé –õ–µ—Ç–æ –≤–æ –≤—Å–µ–π –∫—Ä–∞—Å–µ ‚Äî —Å–æ–ª–Ω—Ü–µ, –∂–∞—Ä–∞ –∏ –±–µ–∑—É–º–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!",
            "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –∂–≥—É—á–∞—è, –∫–∞–∫ —Ä–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª ‚Äî –ª—É—á—à–µ –∏—Å–∫—Ä–∏—Ç–µ –ø—Ä–æ—Ö–ª–∞–¥–æ–π!",
            "üî• –ñ–∞—Ä–∫–æ, –∫–∞–∫ –≤ –ø–µ—á–∫–µ, —Ç–∞–∫ —á—Ç–æ –Ω–∞–π–¥–∏—Ç–µ —Ç–µ–Ω—å –∏ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ!",
            "üòé –°–æ–ª–Ω—Ü–µ —Å–ª–µ–ø–∏—Ç, –∫–∞–∫ –∞–ª–º–∞–∑, —Ç–∞–∫ —á—Ç–æ –∑–∞—â–∏—Ç–∏—Ç–µ –≥–ª–∞–∑–∞ –∏ –∫–æ–∂—É!",
            "‚òÄÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∑–ª–µ—Ç–µ–ª–∞, –∫–∞–∫ –ø–∞—Ä—É—Å –Ω–∞ –≤–µ—Ç—Ä—É ‚Äî –ø–æ—Ä–∞ –æ—Å–≤–µ–∂–∏—Ç—å—Å—è!",
            "üî• –ü–æ–≥–æ–¥–∞ —Ä–∞—Å–∫–∞–ª—ë–Ω–Ω–∞—è, –∫–∞–∫ –ª–µ—Ç–Ω–∏–π —à—Ç–æ—Ä–º, –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ—Ö–ª–∞–¥—É!",
            "üòé –õ–µ—Ç–æ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–≥–∞—Ä–µ ‚Äî —Å–æ–ª–Ω—Ü–µ –∂–∞—Ä–∏—Ç, —Ç–∞–∫ —á—Ç–æ –±–µ—Ä–µ–≥–∏—Ç–µ—Å—å –æ–∂–æ–≥–æ–≤!"
        ]

    # –§—Ä–∞–∑—ã –¥–ª—è –æ—Å–∞–¥–∫–æ–≤: –¥–æ–∂–¥—å –∏–ª–∏ —Å–Ω–µ–≥. –ï—Å–ª–∏ –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ ‚Äì —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ.
    if "–¥–æ–∂–¥—å" in desc:
        precip_phrases = [
            "üåßÔ∏è –õ–∏–≤–µ–Ω—å, –∫–∞–∫ –∏–∑ –≤–µ–¥—Ä–∞, –∑–æ–Ω—Ç –≤–∞–º —Ç–æ—á–Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è!",
            "‚òî –î–æ–∂–¥—å –∑–∞ –æ–∫–Ω–æ–º ‚Äì –≤—Ä–µ–º—è –¥–ª—è —É—é—Ç–Ω–æ–≥–æ —á–∞–µ–ø–∏—Ç–∏—è –ø–æ–¥ –Ω–∞–≤–µ—Å–æ–º.",
            "üí¶ –î–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å, —Å–ª–æ–≤–Ω–æ –º–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞, –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å —É–∫—Ä—ã—Ç–∏–µ.",
            "üåßÔ∏è –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥–∏–∫, –Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–º–æ–∫–Ω—É—Ç—å –¥–æ –Ω–∏—Ç–∫–∏!",
            "‚òî –î–æ–∂–¥—å –º–æ—Ä–æ—Å–∏—Ç, –∫–∞–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ‚Äì –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Å —É–º–æ–º.",
            "üí¶ –í–æ–¥—ã –¥–æ–∂–¥—è –ª—å—é—Ç—Å—è, –∫–∞–∫ —Å –Ω–µ–±–∞, —Ç–∞–∫ —á—Ç–æ –¥–µ—Ä–∂–∏—Ç–µ—Å—å –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –ª—É–∂.",
            "üåßÔ∏è –ù–µ–±–µ—Å–Ω–∞—è –∑–∞–≤–µ—Å–∞ –¥–æ–∂–¥—è –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç: –ø–æ—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∑–æ–Ω—Ç.",
            "‚òî –î–æ–∂–¥—å –æ–∫—É—Ç—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥, –∫–∞–∫ –≤ —Å–∫–∞–∑–∫–µ ‚Äì –Ω–∞–π–¥–∏—Ç–µ —Å–≤–æ—ë —É–±–µ–∂–∏—â–µ.",
            "üí¶ –î–æ–∂–¥—å –∏–¥–µ—Ç –Ω–µ—É—Å—Ç–∞–Ω–Ω–æ, —Å–ª–æ–≤–Ω–æ —Ä–∏—Ç–º –º–æ—Ä—è ‚Äì –∑–∞–ø–∞—Å–∏—Ç–µ—Å—å –¥–æ–∂–¥–µ–≤–∏–∫–∞–º–∏!"
        ]
    elif "—Å–Ω–µ–≥" in desc:
        precip_phrases = [
            "‚ùÑÔ∏è –°–Ω–µ–≥ –∫—Ä—É–∂–∏—Ç—Å—è, –∫–∞–∫ —Å–Ω–µ–∂–Ω—ã–µ –ø–µ—Ä—å—è ‚Äì –≤—Ä–µ–º—è –ª–µ–ø–∏—Ç—å —Å–Ω–µ–≥–æ–≤–∏–∫–æ–≤!",
            "‚òÉÔ∏è –°–Ω–µ–∂–Ω–æ–µ –ø–æ–∫—Ä—ã–≤–∞–ª–æ, –∫–∞–∫ –∏–∑ —Å–∫–∞–∑–∫–∏ ‚Äì –æ–¥–µ–≤–∞–π—Ç–µ—Å—å –ø–æ—Ç–µ–ø–ª–µ–µ!",
            "üå®Ô∏è –°–Ω–µ–≥ –ø–∞–¥–∞–µ—Ç, —Å–ª–æ–≤–Ω–æ –≤–æ–ª—à–µ–±–Ω—ã–µ —Ö–ª–æ–ø—å—è, –¥–∞—Ä—è –∑–∏–º–Ω—é—é —Å–∫–∞–∑–∫—É!",
            "‚ùÑÔ∏è –õ–µ–≥–∫–∏–π —Å–Ω–µ–≥, –∫–∞–∫ –ø—É—à–∏—Å—Ç—ã–π –∫–æ–≤–µ—Ä, –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∏—Ä –≤ —Å–∫–∞–∑–∫—É.",
            "‚òÉÔ∏è –°–Ω–µ–∂–æ–∫ –∏–¥–µ—Ç, –∫–∞–∫ –º—è–≥–∫–∏–π –ø–ª–µ–¥ ‚Äì –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∑–∏–º–Ω–µ–π –º–∞–≥–∏–µ–π!",
            "üå®Ô∏è –°–Ω–µ–≥, –∫–∞–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏, —Å–≤–µ—Ä–∫–∞–µ—Ç –∏ —É–∫—Ä–∞—à–∞–µ—Ç –º–∏—Ä!",
            "‚ùÑÔ∏è –°–Ω–µ–≥ –ø–∞–¥–∞–µ—Ç, —Å–ª–æ–≤–Ω–æ –Ω–µ–∂–Ω—ã–µ –ª–µ–ø–µ—Å—Ç–∫–∏, —Å–æ–∑–¥–∞–≤–∞—è –∑–∏–º–Ω—é—é –∏–¥–∏–ª–ª–∏—é.",
            "‚òÉÔ∏è –°–Ω–µ–∂–Ω–∞—è –≤—É–∞–ª—å –æ–∫—É—Ç—ã–≤–∞–µ—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥ ‚Äì –≤—Ä–µ–º—è –¥–ª—è –∑–∏–º–Ω–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!",
            "üå®Ô∏è –•–æ–ª–æ–¥–Ω—ã–π —Å–Ω–µ–≥, –∫–∞–∫ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –ª—å–¥–∞, –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é –∑–∏–º–Ω—é—é –º–∞–≥–∏—é!"
        ]
    elif "–ü–∞—Å–º—É—Ä–Ω–æ" in desc:
        precip_phrases = [
            "‚òÅÔ∏è –¢—É—á–∏ —Å–≥—É—â–∞—é—Ç—Å—è, –∫–∞–∫ –ø–µ—Ä–µ–¥ —Ö–æ—Ä–æ—à–µ–π –±—É—Ä–µ–π. –ù–∞–¥–µ—é—Å—å, –¥–æ–∂–¥—å –Ω–µ –∑–∞—Å—Ç–∞–Ω–µ—Ç –≤—Ä–∞—Å–ø–ª–æ—Ö!",
            "üå´Ô∏è –ú—Ä–∞—á–Ω–æ, –∫–∞–∫ –≤ —Ç—Ä—é–º–µ –±–µ–∑ —Å–≤–µ—Ç–∞. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞—Å–∫–∞—Ç–æ–≤ –≥—Ä–æ–º–∞ –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.",
            "‚òÅÔ∏è –°–µ—Ä–æ–µ –Ω–µ–±–æ –Ω–∞–≤–∏—Å–ª–æ, —Å–ª–æ–≤–Ω–æ –∑–∞—Ç–∞–∏–≤—à–∏–π—Å—è —à—Ç–æ—Ä–º. –í—Ä–µ–º—è –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –∫—É—Ä—Å–µ –Ω–∞ —Å–æ–ª–Ω—Ü–µ!",
            "üå´Ô∏è –¢–∞–∫–æ–µ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ —Å–æ–ª–Ω—Ü–µ —Ä–µ—à–∏–ª–æ –≤–∑—è—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π. –ù–∞–¥–µ—é—Å—å, –æ–Ω–æ –Ω–µ–¥–æ–ª–≥–æ –±—É–¥–µ—Ç –ª–µ–Ω–∏—Ç—å—Å—è.",
            "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ —É–Ω—ã–ª–∞—è, –∫–∞–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ. –ù–æ –¥–ª—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π —ç—Ç–æ –Ω–µ –ø–æ–º–µ—Ö–∞!",
            "üå´Ô∏è –ù–µ–±–æ —Ö–º—É—Ä–æ–µ, –∫–∞–∫ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –ó–æ—Ä–æ. –ú–æ–∂–µ—Ç, —Ö–æ—Ç—å –≥–æ—Ä—è—á–∏–π —á–∞–π —Å–∫—Ä–∞—Å–∏—Ç –¥–µ–Ω—å?",
            "‚òÅÔ∏è –í—Å—ë –∑–∞–≤–æ–ª–æ–∫–ª–æ –æ–±–ª–∞–∫–∞–º–∏, –∫–∞–∫ –∫–∞—Ä—Ç—É –±–µ–∑ –∫–æ–º–ø–∞—Å–∞. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –¥–æ–∂–¥—å –ø–æ–π–¥—ë—Ç –∏–ª–∏ –Ω–µ—Ç?",
            "üå´Ô∏è –ú–æ—Ä–µ –æ–±–ª–∞–∫–æ–≤ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–µ—Ä–∂–∞—Ç—å—Å—è –∫—É—Ä—Å–∞ –∏ –Ω–µ —É–Ω—ã–≤–∞—Ç—å!",
            "‚òÅÔ∏è –¢–∞–∫–∞—è –ø–∞—Å–º—É—Ä–Ω–æ—Å—Ç—å –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–≤–µ—â–∞–µ—Ç —á—Ç–æ-—Ç–æ‚Ä¶ –ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ?"
        ]
    else:
        precip_phrases = [
            "üåà –û—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–µ–±–æ —á–∏—Å—Ç–æ, –∫–∞–∫ –ø–æ—Å–ª–µ —à—Ç–æ—Ä–º–∞.",
            "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ —Å—É—Ö–∞—è –∏ —Å–æ–ª–Ω–µ—á–Ω–∞—è ‚Äì –∏–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!",
            "üå§Ô∏è –ù–∏–∫–∞–∫–∏—Ö –æ—Å–∞–¥–∫–æ–≤, –ª–∏—à—å —è—Ä–∫–æ–µ –Ω–µ–±–æ –∏ –æ–±–µ—â–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤!",
            "üåû –Ø—Å–Ω–æ–µ –Ω–µ–±–æ, –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ, –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–µ—á—Ç—ã –æ –ø–ª–∞–≤–∞–Ω–∏–∏.",
            "‚ú® –ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ, —Å–ª–æ–≤–Ω–æ –∫–∞—Ä—Ç–∞ —Å–æ–∫—Ä–æ–≤–∏—â, –∑–æ–≤–µ—Ç –≤ –ø—É—Ç—å.",
            "üåü –ù–µ–±–æ –±–µ–∑ –æ–±–ª–∞–∫–æ–≤ ‚Äì –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–æ—Ä—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã!",
            "üí´ –û—Å–∞–¥–∫–æ–≤ –Ω–µ—Ç, –∏ –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –ø–æ–ª–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!",
            "üå§Ô∏è –°–≤–µ—Ç–∏—Ç —Å–æ–ª–Ω—Ü–µ, –∫–∞–∫ –∑–æ–ª–æ—Ç–æ–π –¥–∏—Å–∫ ‚Äì –Ω–∏–∫–∞–∫–∏—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤!",
            "‚òÄÔ∏è –ù–µ–±–æ —è—Å–Ω–æ–µ, –∫–∞–∫ –æ–±–µ—â–∞–Ω–∏–µ —É–¥–∞—á–∏ ‚Äì –≤–ø–µ—Ä–µ–¥ –∑–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º–∏!"
        ]

    # –§—Ä–∞–∑—ã –¥–ª—è –≤–µ—Ç—Ä–∞
    if wind_speed > 15:
        wind_phrases = [
            "üí® –í–µ—Ç–µ—Ä —Å–≤–∏—Ä–µ–ø, –∫–∞–∫ —à—Ç–æ—Ä–º –Ω–∞ –º–æ—Ä–µ ‚Äì –¥–µ—Ä–∂–∏—Ç–µ—Å—å –∫—Ä–µ–ø—á–µ, –¥—Ä—É–∑—å—è!",
            "üå™Ô∏è –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, —Å–ª–æ–≤–Ω–æ –±—É—Ä—è, –≥–æ—Ç–æ–≤ —Å–±–∏—Ç—å —Å –Ω–æ–≥ ‚Äì –±–µ—Ä–µ–≥–∏—Ç–µ—Å—å!",
            "üçÉ –í–µ—Ç–µ—Ä —Ä–µ–≤–µ—Ç, –∫–∞–∫ –¥–∏–∫–æ–µ –º–æ—Ä–µ, –Ω–µ —à—É—Ç–∏—Ç–µ —Å –ø–æ–≥–æ–¥–æ–π!",
            "üí® –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞, –∫–∞–∫ —É—Ä–∞–≥–∞–Ω, –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –∫—Ä–µ–ø—á–µ –¥–µ—Ä–∂–∞—Ç—å —à—Ç—É—Ä–≤–∞–ª!",
            "üå™Ô∏è –í–µ—Ç–µ—Ä –±—É—à—É–µ—Ç, –∫–∞–∫ —Ä–∞–∑–≥–Ω–µ–≤–∞–Ω–Ω—ã–π –æ–∫–µ–∞–Ω ‚Äì –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –±–µ–∑ –∑–∞—â–∏—Ç—ã!",
            "üçÉ –í–µ—Ç–µ—Ä —Å–≤–∏—Å—Ç–∏—Ç, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —à—Ç–æ—Ä–º ‚Äì –¥–µ—Ä–∂–∏—Ç–µ —à–ª—è–ø—ã –ø–æ–¥–∞–ª—å—à–µ –æ—Ç –∫—Ä–∞–µ–≤!",
            "üí® –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, —Å–ª–æ–≤–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –º–æ—Ä—è ‚Äì –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!",
            "üå™Ô∏è –í–µ—Ç–µ—Ä —Ç–∞–∫ —Å–∏–ª–µ–Ω, —á—Ç–æ –º–æ–∂–µ—Ç —É–Ω–µ—Å—Ç–∏ –¥–∞–∂–µ –º–µ—á—Ç—ã ‚Äì –±–µ—Ä–µ–≥–∏—Ç–µ—Å—å!",
            "üçÉ –í–µ—Ç–µ—Ä, –∫–∞–∫ –≤–æ–ª–Ω—ã –Ω–∞ –±—É—Ä–Ω–æ–º –º–æ—Ä–µ, –Ω–µ –¥–∞—ë—Ç –ø–æ–∫–æ—è ‚Äì –ª—É—á—à–µ –ø—Ä–∏—Å—Ç–µ–≥–Ω–∏—Ç–µ –≤–µ—â–∏!"
        ]
    elif wind_speed > 10:
        wind_phrases = [
            "üå¨Ô∏è –í–µ—Ç–µ—Ä –æ—â—É—Ç–∏–º—ã–π, –∫–∞–∫ –ª—ë–≥–∫–∏–π –ø–æ—Ä—ã–≤, –¥–æ–±–∞–≤–∏—Ç —Å–≤–µ–∂–µ—Å—Ç–∏ –≤ –≤–∞—à –¥–µ–Ω—å.",
            "üçÉ –í–µ—Ç–µ—Ä –∏–≥—Ä–∞–µ—Ç, —Å–ª–µ–≥–∫–∞ —Ä–∞–∑–≤–µ–≤–∞—è –≤–æ–ª–æ—Å—ã ‚Äì —à–∞–ø–∫–∞ –∏–ª–∏ —à–∞—Ä—Ñ –Ω–µ –ø–æ–º–µ—à–∞—é—Ç.",
            "üí® –í–µ—Ç–µ—Ä –∑–∞–º–µ—Ç–Ω—ã–π, –Ω–æ –µ—â—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚Äì –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –¥—É–Ω–æ–≤–µ–Ω–∏–µ–º!",
            "üå¨Ô∏è –î–æ–≤–æ–ª—å–Ω–æ –≤–µ—Ç—Ä–µ–Ω–æ, –∫–∞–∫ –º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑, —Ç–∞–∫ —á—Ç–æ –±—É–¥—å—Ç–µ –Ω–∞–≥–æ—Ç–æ–≤–µ.",
            "üçÉ –í–µ—Ç–µ—Ä –¥—É–µ—Ç, –∫–∞–∫ –Ω–µ–∂–Ω–æ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ ‚Äì —Ç–æ–ª—å–∫–æ –Ω–µ –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–∞–π—Ç–µ—Å—å.",
            "üí® –í–µ—Ç–µ—Ä –∫–æ–ª—ã—à–µ—Ç, –∫–∞–∫ –ª—ë–≥–∫–∞—è –≤–æ–ª–Ω–∞ ‚Äì –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–µ–∂–µ—Å—Ç–∏ –±–µ–∑ —Å—É–µ—Ç—ã.",
            "üå¨Ô∏è –í–µ—Ç–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∫–∞–∫ —Ç–∏—Ö–∏–π —à—ë–ø–æ—Ç –º–æ—Ä—è, –º—è–≥–∫–æ –æ—Å–≤–µ–∂–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
            "üçÉ –õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫, –∫–∞–∫ –ª–∞—Å–∫–æ–≤–æ–µ –¥—É–Ω–æ–≤–µ–Ω–∏–µ, –ø—Ä–∏—è—Ç–Ω–æ –±–∞–ª—É–µ—Ç –≤–∞—Å.",
            "üí® –í–µ—Ç–µ—Ä–æ–∫ –Ω–µ–∂–Ω—ã–π, –∫–∞–∫ —É—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏–∑, –¥–∞—Ä–∏—Ç —á—É–≤—Å—Ç–≤–æ –ª–µ–≥–∫–æ—Å—Ç–∏."
        ]
    else:
        wind_phrases = [
            "üåÄ –í–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ—Ç, –∫–∞–∫ —Å–ø–æ–∫–æ–π–Ω–æ–µ –º–æ—Ä–µ ‚Äì –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
            "üå´Ô∏è –¢–∏—Ö–æ, –∫–∞–∫ –≤ —Ç–∏—Ö–æ–π –±—É—Ö—Ç–µ, –≤–µ—Ç—Ä–∞ –ø–æ—á—Ç–∏ –Ω–µ –æ—â—É—â–∞–µ—Ç—Å—è ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å.",
            "üçÉ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, —Å–ª–æ–≤–Ω–æ –ª—ë–≥–∫–∏–π —à—ë–ø–æ—Ç, –ø–æ—á—Ç–∏ –Ω–µ–∑–∞–º–µ—Ç–µ–Ω.",
            "üåÄ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —à—Ç–∏–ª—å ‚Äì —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –∫–∞–∫ –Ω–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –≥–ª–∞–¥–∏ –º–æ—Ä—è.",
            "üå´Ô∏è –ü–æ—á—Ç–∏ –Ω–µ—Ç –≤–µ—Ç—Ä–∞ ‚Äì —É—Å–ª–æ–≤–∏—è –∏–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π.",
            "üçÉ –í–µ—Ç—Ä–∞ –µ–¥–≤–∞ —É–ª–æ–≤–∏–º—ã–π, –∫–∞–∫ —Ç–∏—Ö–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–π –±—Ä–∏–∑, –¥–∞—Ä–∏—Ç –Ω–µ–∂–Ω–æ—Å—Ç—å.",
            "üåÄ –ë–µ–∑–≤–µ—Ç—Ä–µ–Ω–Ω–æ, –∫–∞–∫ –≤ —Ç–∏—Ö–æ–π –≥–∞–≤–∞–Ω–∏ ‚Äì –≤—Ä–µ–º—è –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞.",
            "üå´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –ø–æ—á—Ç–∏ —à—Ç–∏–ª—å ‚Äì –∏–¥–µ–∞–ª—å–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.",
            "üçÉ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–µ—Ç—Ä–∞ ‚Äì —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É—é—Ç –Ω–∞ –±–æ—Ä—Ç—É."
        ]

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
    temp_phrase = random.choice(temp_phrases)
    precip_phrase = random.choice(precip_phrases)
    wind_phrase = random.choice(wind_phrases)

    return (
        f"{temp_phrase}\n"
        f"{precip_phrase}\n"
        f"{wind_phrase}"
    )


async def weather_monitor():
    while True:
        for user_id, cities in user_subscriptions.items():
            for city in cities:
                data = await fetch_forecast(city)
                if data:
                    timezone_offset = data["city"]["timezone"]
                    now = datetime.utcnow() + timedelta(seconds=timezone_offset)
                    next_hours = [now + timedelta(hours=i) for i in range(1, 7)]

                    alerts = []
                    for forecast in data["list"]:
                        dt_local = datetime.strptime(forecast["dt_txt"], "%Y-%m-%d %H:%M:%S") + timedelta(seconds=timezone_offset)
                        if dt_local in next_hours:
                            desc = forecast["weather"][0]["description"]
                            wind_speed = forecast["wind"]["speed"]
                            temp = forecast["main"]["temp"]

                            # –ï—Å–ª–∏ –ø–æ–≥–æ–¥–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                            if user_id not in last_weather:
                                last_weather[user_id] = {}
                            if city not in last_weather[user_id]:
                                last_weather[user_id][city] = {}

                            alert_msg = generate_weather_description(desc, wind_speed, temp)
                            alerts.append(alert_msg)

                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≤—Å–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                            last_weather[user_id][city][dt_local.hour] = desc

                    if alerts:
                        await bot.send_message(user_id, "\n".join(alerts))

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å



@dp.message_handler(commands=["subs"])
async def spisok_subs(message: Message):
    user_id = str(message.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ str, –∫–∞–∫ –≤ user_subscriptions
    cities = user_subscriptions.get(user_id, [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–ª–∏ []

    if cities:
        await message.answer(f"üìç –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–∏ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(c.capitalize() for c in cities))
    else:
        await message.answer("‚ùå –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥.")


location_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
location_keyboard.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def get_weather_by_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude

    weather_data = fetch_weather_by_coordinates(lat, lon)
    if weather_data:
        await message.answer(weather_data)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def fetch_weather_by_coordinates(lat, lon):
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OWM_TOKEN}&units=metric&lang=ru"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        description = data["weather"][0]["description"].capitalize()
        temp = data["main"]["temp"]
        wind_speed = data["wind"]["speed"]

        return f"üåç –ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n‚òÅ {description}\n{generate_weather_description(description, wind_speed, temp)}"
    return None


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def on_startup(_):
    asyncio.create_task(weather_monitor())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)